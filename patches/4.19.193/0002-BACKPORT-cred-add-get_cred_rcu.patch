From be1edc5e30f04c8a07c439e1c77fedf0a31c9a0a Mon Sep 17 00:00:00 2001
From: DataEraserC <102341238+DataEraserC@users.noreply.github.com>
Date: Thu, 2 Jan 2025 19:58:18 +0800
Subject: [PATCH 2/2] BACKPORT: cred: add get_cred_rcu()
 https://github.com/torvalds/linux/commit/97d0fb239c041f5f99655af74812c3ab75cc4346
 upstream

Sometimes we want to opportunistically get a
ref to a cred in an rcu_read_lock protected section.
get_task_cred() does this, and NFS does as similar thing
with its own credential structures.
To prepare for NFS converting to use 'struct cred' more
uniformly, define get_cred_rcu(), and use it in
get_task_cred().

Signed-off-by: NeilBrown <neilb@suse.com>
Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

CONFLICTS:
cred: switch to using atomic_long_t
- resolve conflict by using `atomic_long_inc_not_zero`
  instead of `atomic_inc_not_zero`

Signed-off-by: backslashxx <118538522+backslashxx@users.noreply.github.com>
---
 include/linux/cred.h | 11 +++++++++++
 kernel/cred.c        |  2 +-
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/include/linux/cred.h b/include/linux/cred.h
index 69da4674ea0..781178aaaf5 100644
--- a/include/linux/cred.h
+++ b/include/linux/cred.h
@@ -256,6 +256,17 @@ static inline const struct cred *get_cred(const struct cred *cred)
 	return get_new_cred(nonconst_cred);
 }
 
+static inline const struct cred *get_cred_rcu(const struct cred *cred)
+{
+	struct cred *nonconst_cred = (struct cred *) cred;
+	if (!cred)
+		return NULL;
+	if (!atomic_long_inc_not_zero(&nonconst_cred->usage))
+		return NULL;
+	validate_creds(cred);
+	return cred;
+}
+
 /**
  * put_cred - Release a reference to a set of credentials
  * @cred: The credentials to release
diff --git a/kernel/cred.c b/kernel/cred.c
index 8c58f0f63af..cf72f2567b3 100644
--- a/kernel/cred.c
+++ b/kernel/cred.c
@@ -197,7 +197,7 @@ const struct cred *get_task_cred(struct task_struct *task)
 	do {
 		cred = __task_cred((task));
 		BUG_ON(!cred);
-	} while (!atomic_long_inc_not_zero(&((struct cred *)cred)->usage));
+	} while (!get_cred_rcu(cred));
 
 	rcu_read_unlock();
 	return cred;
-- 
2.47.0

